<!-- /single.html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Five Forks Fire Weather ‚Äî Single File</title>

    <!-- Leaflet CSS -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet/dist/leaflet.css" />

    <style>
      /* Five Forks Fire Weather ‚Äî Single-file build
         - Live data: NOAA (NWS) + NASA FIRMS
         - Map tiles: OpenStreetMap via Leaflet
         - Includes Brunswick & Greensville; self-check ensures both render
      */
      :root { --bg:#f9fafb; --card:#ffffff; --muted:#6b7280; --shadow:0 2px 6px rgba(0,0,0,.08); --ok:#16a34a; --warn:#d97706; --err:#dc2626; --neutral:#475569; }
      *{box-sizing:border-box}
      html,body{height:100%}
      body{margin:0;font-family:system-ui,-apple-system,Segoe UI,Roboto,Arial,sans-serif;background:var(--bg);color:#0f172a}

      .app-header{display:flex;align-items:center;justify-content:space-between;padding:.75rem 1rem;background:#ef4444;color:#fff}
      .app-header h1{margin:0;font-size:1.15rem}
      .statusbar{display:flex;gap:.5rem;align-items:center}
      .badge{padding:.25rem .5rem;border-radius:999px;font-size:.8rem;box-shadow:var(--shadow);background:#e5e7eb;color:var(--neutral)}
      .badge.ok{color:#fff;background:var(--ok)}
      .badge.warn{color:#fff;background:var(--warn)}
      .badge.err{color:#fff;background:var(--err)}

      main{display:grid;gap:1rem;padding:1rem}
      .cards{display:grid;grid-template-columns:repeat(auto-fit,minmax(260px,1fr));gap:1rem}
      .card{background:var(--card);border-radius:12px;padding:.9rem;box-shadow:var(--shadow)}
      .card h3{margin:0 0 .25rem;display:flex;align-items:center;gap:.4rem;font-size:1.05rem}
      .dim{color:var(--muted);font-size:.9rem}
      .metric{margin:.25rem 0}

      .map-wrap{height:480px;border-radius:12px;overflow:hidden;box-shadow:var(--shadow)}
      #map{height:100%;width:100%}
      .legend{background:#fff;padding:6px 8px;border-radius:8px;box-shadow:var(--shadow)}
      .legend .row{display:flex;align-items:center;gap:6px;margin:4px 0}
      .legend .swatch{width:12px;height:12px;border-radius:50%;display:inline-block}

      .alerts{background:#fff7ed;border:1px solid #fed7aa;color:#9a3412;padding:.75rem;border-radius:8px;box-shadow:var(--shadow)}
      .app-footer{text-align:center;color:var(--muted);padding:.75rem}

      @media (min-width:960px){
        main{grid-template-columns:1.2fr 1fr;align-items:start}
        .map-wrap{grid-row:span 2}
      }
    </style>
  </head>
  <body>
    <header class="app-header">
      <h1>üî• Five Forks Fire Weather</h1>
      <div class="statusbar" aria-live="polite">
        <span id="status-noaa" class="badge" title="NOAA Weather API">NOAA ‚è≥</span>
        <span id="status-firms" class="badge" title="NASA FIRMS GeoJSON">FIRMS ‚è≥</span>
        <span id="status-tiles" class="badge" title="Map tiles (OSM)">Tiles ‚è≥</span>
      </div>
    </header>

    <main>
      <section id="cards" class="cards" aria-label="County conditions"></section>
      <section class="map-wrap" aria-label="Hotspots map">
        <div id="map"></div>
      </section>
      <section id="alerts" class="alerts" aria-live="polite" hidden></section>
    </main>

    <footer class="app-footer">
      <small>Data: NOAA NWS & NASA FIRMS ¬∑ Auto-refresh hourly</small>
    </footer>

    <!-- Libraries -->
    <script src="https://unpkg.com/leaflet/dist/leaflet.js"></script>
    <script src="https://unpkg.com/@turf/turf@6/turf.min.js"></script>

    <script>
      /**
       * Single-file app logic
       * - Verifies connectivity (badges) for NOAA, FIRMS, OSM tiles
       * - Draws hotspots + 20 km buffers + county centers
       * - Builds cards per county using NOAA hourly forecast
       */

      // ----------------------------- Config ---------------------------------
      const COUNTIES = [
        { name: "Amelia",        lat: 37.342, lon: -77.980 },
        { name: "Nottoway",      lat: 37.142, lon: -78.089 },
        { name: "Dinwiddie",     lat: 37.077, lon: -77.587 },
        { name: "Prince George", lat: 37.221, lon: -77.288 },
        { name: "Brunswick",     lat: 36.758, lon: -77.847 },
        { name: "Greensville",   lat: 36.686, lon: -77.542 },
      ];

      const BUFFER_KM = 20; // why: conservative proximity window for nearby hotspots
      const FIRMS_URL = "https://firms.modaps.eosdis.nasa.gov/active_fire/c6.1/geojson/MODIS_C6_1_USA_contiguous_and_Hawaii_24h.geojson";

      // --------------------------- Status Helpers ----------------------------
      function setBadge(id, state, label){
        const el = document.getElementById(id);
        if(!el) return;
        el.classList.remove('ok','warn','err');
        el.classList.add(state);
        if(label) el.textContent = label;
      }
      function showAlert(msg){ const box = document.getElementById('alerts'); if(!box) return; box.hidden = false; box.textContent = msg; }

      // ----------------------------- Map Init --------------------------------
      let map, layers = {};
      function initMap(){
        map = L.map('map');
        const tiles = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18, attribution: '¬© OpenStreetMap contributors' });
        tiles.on('load', () => setBadge('status-tiles','ok','Tiles ‚úÖ'));
        tiles.on('tileerror', () => setBadge('status-tiles','err','Tiles ‚ùå'));
        tiles.addTo(map);

        L.control.scale({ metric: false }).addTo(map);
        layers.hotspots = L.layerGroup().addTo(map);
        layers.buffers  = L.layerGroup().addTo(map);
        layers.centers  = L.layerGroup().addTo(map);

        const overlays = { 'üî• Hotspots': layers.hotspots, 'üü¢ Buffers (20 km)': layers.buffers, 'üìç County centers': layers.centers };
        L.control.layers({}, overlays, { collapsed: true }).addTo(map);

        const legend = L.control({ position: 'bottomright' });
        legend.onAdd = () => {
          const div = L.DomUtil.create('div','legend');
          div.innerHTML = `
            <div class="row"><span class="swatch" style="background:#ef4444"></span>Hotspot</div>
            <div class="row"><span class="swatch" style="background:#22c55e"></span>20 km buffer</div>
            <div class="row"><span class="swatch" style="background:#0ea5e9"></span>County center</div>`;
          return div;
        };
        legend.addTo(map);
      }

      // --------------------------- Data Fetching -----------------------------
      async function fetchFIRMS(){
        try {
          const res = await fetch(FIRMS_URL, { cache: 'no-store' });
          if(!res.ok) throw new Error(`FIRMS status ${res.status}`);
          const data = await res.json();
          setBadge('status-firms','ok','FIRMS ‚úÖ');
          return data;
        } catch (e) {
          console.warn('FIRMS fetch failed', e);
          setBadge('status-firms','err','FIRMS ‚ùå');
          return { type:'FeatureCollection', features: [] };
        }
      }

      async function fetchNOAAHourly(lat, lon){
        try {
          const p = await fetch(`https://api.weather.gov/points/${lat},${lon}`, { headers: { 'Accept':'application/geo+json' } });
          if(!p.ok) throw new Error(`points status ${p.status}`);
          const meta = await p.json();
          const hourlyUrl = meta?.properties?.forecastHourly;
          if(!hourlyUrl) throw new Error('missing forecastHourly');
          const f = await fetch(hourlyUrl, { cache: 'no-store' });
          if(!f.ok) throw new Error(`hourly status ${f.status}`);
          const hourly = await f.json();
          setBadge('status-noaa','ok','NOAA ‚úÖ');
          return hourly?.properties?.periods?.[0] ?? null;
        } catch(e) {
          console.warn('NOAA fetch failed', e);
          setBadge('status-noaa','warn','NOAA ‚ö†Ô∏è'); // why: continue rendering with N/A
          return null;
        }
      }

      // --------------------------- Rendering ---------------------------------
      function renderCardsStart(){ document.getElementById('cards').innerHTML = ''; }

      function renderCountyCard({ name }, now, hotspotCount){
        const el = document.createElement('article');
        el.className = 'card';
        const summary = now ? `${now.temperature}\u00B0F ‚Ä¢ ${now.relativeHumidity?.value ?? 'N/A'}% RH ‚Ä¢ ${now.windSpeed ?? 'N/A'} ${now.windDirection ?? ''}` : 'N/A';
        const label   = now?.shortForecast ?? 'N/A';
        el.innerHTML = `
          <h3>${label.includes('Thunder') ? '‚õàÔ∏è' : 'üå§Ô∏è'} ${name}</h3>
          <div class="dim">Class: ${label}</div>
          <div class="metric">Wx: ${summary}</div>
          <div class="metric">Hotspots (‚â§ ${BUFFER_KM} km): <strong>${hotspotCount}</strong></div>
        `;
        document.getElementById('cards').appendChild(el);
      }

      function drawBuffersAndCenters(){
        layers.buffers.clearLayers();
        layers.centers.clearLayers();

        const circles = [];
        for(const c of COUNTIES){
          const circle = turf.circle([c.lon, c.lat], BUFFER_KM, { units: 'kilometers', steps: 64 });
          L.geoJSON(circle, { style: { color:'#22c55e', weight:1, fillOpacity:0.08 } }).addTo(layers.buffers);
          circles.push(circle);
          L.circleMarker([c.lat,c.lon], { radius:5, color:'#0ea5e9', fillColor:'#0ea5e9', fillOpacity:.9 }).bindTooltip(c.name).addTo(layers.centers);
        }
        const bbox = turf.bbox(turf.featureCollection(circles));
        const sw = [bbox[1], bbox[0]]; const ne = [bbox[3], bbox[2]];
        map.fitBounds([sw, ne], { padding:[20,20] });
      }

      function drawHotspots(geojson){
        layers.hotspots.clearLayers();
        if(!geojson?.features?.length) return;
        L.geoJSON(geojson, { pointToLayer:(f,latlng)=> L.circleMarker(latlng, { radius:4, color:'#ef4444', fillColor:'#ef4444', fillOpacity:.85, weight:1 }).bindPopup('üî• Active fire (FIRMS)') }).addTo(layers.hotspots);
      }

      // ------------------------------ Logic ----------------------------------
      async function refresh(){
        renderCardsStart();
        const firms = await fetchFIRMS();
        drawHotspots(firms);
        drawBuffersAndCenters();

        const features = firms?.features ?? [];
        for(const county of COUNTIES){
          const now = await fetchNOAAHourly(county.lat, county.lon);
          const buffer = turf.circle([county.lon, county.lat], BUFFER_KM, { units: 'kilometers' });
          const count = features.reduce((acc, f) => {
            if(!f.geometry || f.geometry.type !== 'Point') return acc;
            const [x,y] = f.geometry.coordinates; // lon, lat
            return acc + (turf.booleanPointInPolygon(turf.point([x,y]), buffer) ? 1 : 0);
          }, 0);
          renderCountyCard(county, now, count);
        }

        // Self-check for Brunswick & Greensville
        const names = [...document.querySelectorAll('#cards .card h3')].map(h => h.textContent);
        if (!names.some(t => t.includes('Brunswick')) || !names.some(t => t.includes('Greensville'))){
          showAlert('Self-check failed: Brunswick and/or Greensville not rendered.');
        }
      }

      // ------------------------------ Boot -----------------------------------
      window.addEventListener('DOMContentLoaded', () => {
        initMap();
        refresh();
        setInterval(refresh, 60 * 60 * 1000); // hourly
      });
    </script>
  </body>
</html>
